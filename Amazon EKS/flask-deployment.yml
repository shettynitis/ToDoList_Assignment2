apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 2  # For load balancing
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1  # Maximum number of pods that can be unavailable during the update
      maxSurge: 1        # Maximum number of new pods to create during the update
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: shettyniti/to-do-app:v3_healthy  # Use the Docker Hub image
        ports:
        - containerPort: 5000
        env:
        - name: MONGO_HOST
          value: "mongo-service"
        - name: MONGO_PORT
          value: "27017"
        livenessProbe:
          httpGet:
            path: /health  # Ensure your app has an endpoint like /health
            port: 5000
          initialDelaySeconds: 15  # Delay before starting liveness checks
          periodSeconds: 10        # Check every 10 seconds
          failureThreshold: 3      # Restart after 3 failures
        readinessProbe:
          httpGet:
            path: /health  # Same endpoint can be used for readiness
            port: 5000
          initialDelaySeconds: 5   # Shorter delay for readiness check
          periodSeconds: 5         # Check every 5 seconds
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

